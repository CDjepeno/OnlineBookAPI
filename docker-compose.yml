version: '3.8'
services:
  ############################# Backend NESTJS
  backend:
    build:
      context: ./apps/nest
      dockerfile: Dockerfile.dev
    container_name: nest_backend
    ports:
      - "3000:3000"
    volumes:
      - ./apps/nest:/app
      - nest_node_modules:/apps/nest/node_modules 
    environment:
      DATABASE_HOST: ${DB_HOST}
      DATABASE_PORT: ${DB_PORT}
      DATABASE_USER: ${DB_USERNAME}
      DATABASE_PASSWORD: ${DB_PASSWORD}
      DATABASE_NAME: ${DB_NAME}
      NODE_ENV: development
      KAFKA_BROKER: kafka:9094
    depends_on:
      - db
  ############################# Frontend REACTJS
  frontend:
    build:
      context: ./apps/client-react 
      dockerfile: Dockerfile
    container_name: react_frontend
    ports:
      - "5173:5173" 
    volumes:
      - ./apps/client-react:/app
      - react_node_modules:/apps/client-react/node_modules
    environment:
      NODE_ENV: development 
    command: npm run dev 
  ############################# Database MYSQL
  db:
    image: mysql
    container_name: mysql_db
    restart: always
    ports:
      - "3307:3306"           
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME}
    volumes:
      - db_data:/var/lib/mysql
  ############################# Zookeeper
  zookeeper:
    container_name: zookeeper
    image: docker.io/bitnami/zookeeper:3.9
    ports:
      - "2181:2181"
    volumes:
      - "zookeeper_data:/bitnami"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
  ############################# Message Broker KAFKA
  kafka:
    container_name: kafka
    image: docker.io/bitnami/kafka:3.4
    ports:
      - "9094:9094"
    volumes:
      - "kafka_data:/bitnami"
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://kafka:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
    depends_on:
      - zookeeper
  ############################# Message Broker KAFKA
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka_ui
    ports:
      - "8080:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9094
    

volumes:
  db_data:
  react_node_modules:
  nest_node_modules:
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local
